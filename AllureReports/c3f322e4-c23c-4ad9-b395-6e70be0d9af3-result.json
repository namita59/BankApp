{"name": "test_Cust_Create_006[getDataForCustomerCreate0]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/customer.html\">...</a> is not clickable at point (314, 621). Other element would receive the click: <footer>...</footer>\n  (Session info: chrome=127.0.6533.100)\nStacktrace:\n\tGetHandleVerifier [0x00007FF78A8F9632+30946]\n\t(No symbol) [0x00007FF78A8AE3C9]\n\t(No symbol) [0x00007FF78A7A6FDA]\n\t(No symbol) [0x00007FF78A7FFEEE]\n\t(No symbol) [0x00007FF78A7FD962]\n\t(No symbol) [0x00007FF78A7FAE7B]\n\t(No symbol) [0x00007FF78A7FA095]\n\t(No symbol) [0x00007FF78A7EC271]\n\t(No symbol) [0x00007FF78A81CA6A]\n\t(No symbol) [0x00007FF78A7EBBB6]\n\t(No symbol) [0x00007FF78A81CC80]\n\t(No symbol) [0x00007FF78A83B041]\n\t(No symbol) [0x00007FF78A81C813]\n\t(No symbol) [0x00007FF78A7EA6E5]\n\t(No symbol) [0x00007FF78A7EB021]\n\tGetHandleVerifier [0x00007FF78AA2F83D+1301229]\n\tGetHandleVerifier [0x00007FF78AA3BDB7+1351783]\n\tGetHandleVerifier [0x00007FF78AA32A03+1313971]\n\tGetHandleVerifier [0x00007FF78A92DD06+245686]\n\t(No symbol) [0x00007FF78A8B758F]\n\t(No symbol) [0x00007FF78A8B3804]\n\t(No symbol) [0x00007FF78A8B3992]\n\t(No symbol) [0x00007FF78A8AA3EF]\n\tBaseThreadInitThunk [0x00007FFB6C43257D+29]\n\tRtlUserThreadStart [0x00007FFB6DA0AF28+40]", "trace": "self = <TestCases.Test_Cust_Create.Test_Custmgmt_Create_Class object at 0x0000013CEAACC950>\nsetup = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"5d40b855c1f44fd63b2dfe5b4240f707\")>\ngetDataForCustomerCreate = ('kishore', 'Singh', '07022005', 'shiv puram 23', 'Agra', 'Uttra Pradesh', ...)\n\n    def test_Cust_Create_006(self,setup,getDataForCustomerCreate):\n        self.log.info(\"test_Cust_Create_005 is started\")\n        self.driver =setup\n        self.log.info(\"Opening browser\")\n        self.si = User_Signin_Class(self.driver)\n        self.log.info(\"clicking on Login option\")\n        self.si.ClickOn_Login_Option()\n        self.log.info(\"Entering the username-->\"+self.UserName)\n        self.si.Enter_Username(self.UserName)\n        self.log.info(\"Entering the password-->\"+self.Password)\n        self.si.Enter_Password(self.Password)\n        self.log.info(\"Clicking on Login button-->\")\n        self.si.CLickOn_LogIn_Button()\n        self.cm =Cust_Mgmt_Create_Class(self.driver)\n        self.log.info(\"Clicking on the Customer mgmt option\")\n        self.cm.ClickOn_CustMgmt_link()\n        self.log.info(\"Clicking on the create customer\")\n>       self.cm.Clickon_CreateCust_link()\n\nTestCases\\Test_Cust_Create.py:30: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nPageObjects\\Cust_Mgmt_Create_page.py:37: in Clickon_CreateCust_link\n    self.wait.until(EC.visibility_of_element_located(self.Clickon_CreateCust_link_Xpath)).click()\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:94: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:395: in _execute\n    return self._parent.execute(command, params)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000013CEABB76B0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...07FF78A8AA3EF]\\\\n\\\\tBaseThreadInitThunk [0x00007FFB6C43257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFB6DA0AF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <a href=\"/customer.html\">...</a> is not clickable at point (314, 621). Other element would receive the click: <footer>...</footer>\nE         (Session info: chrome=127.0.6533.100)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF78A8F9632+30946]\nE       \t(No symbol) [0x00007FF78A8AE3C9]\nE       \t(No symbol) [0x00007FF78A7A6FDA]\nE       \t(No symbol) [0x00007FF78A7FFEEE]\nE       \t(No symbol) [0x00007FF78A7FD962]\nE       \t(No symbol) [0x00007FF78A7FAE7B]\nE       \t(No symbol) [0x00007FF78A7FA095]\nE       \t(No symbol) [0x00007FF78A7EC271]\nE       \t(No symbol) [0x00007FF78A81CA6A]\nE       \t(No symbol) [0x00007FF78A7EBBB6]\nE       \t(No symbol) [0x00007FF78A81CC80]\nE       \t(No symbol) [0x00007FF78A83B041]\nE       \t(No symbol) [0x00007FF78A81C813]\nE       \t(No symbol) [0x00007FF78A7EA6E5]\nE       \t(No symbol) [0x00007FF78A7EB021]\nE       \tGetHandleVerifier [0x00007FF78AA2F83D+1301229]\nE       \tGetHandleVerifier [0x00007FF78AA3BDB7+1351783]\nE       \tGetHandleVerifier [0x00007FF78AA32A03+1313971]\nE       \tGetHandleVerifier [0x00007FF78A92DD06+245686]\nE       \t(No symbol) [0x00007FF78A8B758F]\nE       \t(No symbol) [0x00007FF78A8B3804]\nE       \t(No symbol) [0x00007FF78A8B3992]\nE       \t(No symbol) [0x00007FF78A8AA3EF]\nE       \tBaseThreadInitThunk [0x00007FFB6C43257D+29]\nE       \tRtlUserThreadStart [0x00007FFB6DA0AF28+40]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: ElementClickInterceptedException"}, "attachments": [{"name": "log", "source": "dfece167-6ff0-4524-864a-70b5ecc9366c-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "f8436182-010e-4bfb-aca6-9ac41756b0fb-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "getDataForCustomerCreate", "value": "('kishore', 'Singh', '07022005', 'shiv puram 23', 'Agra', 'Uttra Pradesh', '282001')"}], "start": 1723337950792, "stop": 1723337955006, "uuid": "60d1035f-7a20-4283-8bc9-d77ec1920e22", "historyId": "58a4594f24c8b43d47d994bc1a61d712", "testCaseId": "6e773eb6fb7262ed1136a6d34d4a2a10", "fullName": "TestCases.Test_Cust_Create.Test_Custmgmt_Create_Class#test_Cust_Create_006", "labels": [{"name": "parentSuite", "value": "TestCases"}, {"name": "suite", "value": "Test_Cust_Create"}, {"name": "subSuite", "value": "Test_Custmgmt_Create_Class"}, {"name": "host", "value": "Namita"}, {"name": "thread", "value": "14572-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestCases.Test_Cust_Create"}]}